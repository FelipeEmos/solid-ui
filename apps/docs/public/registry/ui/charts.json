{
  "name": "charts",
  "dependencies": [
    "chart.js"
  ],
  "files": [
    {
      "name": "charts.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, onMount, createEffect, on, onCleanup, splitProps } from \"solid-js\"\n\nimport type {\n  ChartComponent,\n  ChartData,\n  ChartItem,\n  ChartOptions,\n  ChartType,\n  ChartTypeRegistry,\n  Plugin,\n  TooltipModel\n} from \"chart.js\"\nimport {\n  ArcElement,\n  BarController,\n  BarElement,\n  BubbleController,\n  CategoryScale,\n  Chart,\n  Colors,\n  DoughnutController,\n  Filler,\n  Legend,\n  LineController,\n  LineElement,\n  LinearScale,\n  PieController,\n  PointElement,\n  PolarAreaController,\n  RadarController,\n  RadialLinearScale,\n  ScatterController,\n  Tooltip\n} from \"chart.js\"\n\nimport { cn } from \"~/lib/utils\"\n\nexport interface TypedChartProps extends ComponentProps<\"div\"> {\n  data: ChartData\n  options?: ChartOptions\n  plugins?: Plugin[]\n}\n\nexport interface ChartProps extends TypedChartProps {\n  type: ChartType\n}\n\nexport interface ChartContext {\n  chart: Chart\n  tooltip: TooltipModel<keyof ChartTypeRegistry>\n}\n\nconst registerMap: { [key in ChartType]: ChartComponent[] } = {\n  bar: [BarController, BarElement, CategoryScale, LinearScale],\n  bubble: [BubbleController, PointElement, LinearScale],\n  doughnut: [DoughnutController, ArcElement],\n  line: [LineController, LineElement, PointElement, CategoryScale, LinearScale],\n  pie: [PieController, ArcElement],\n  polarArea: [PolarAreaController, ArcElement, RadialLinearScale],\n  radar: [RadarController, LineElement, PointElement, RadialLinearScale],\n  scatter: [ScatterController, PointElement, LinearScale]\n}\n\nconst BaseChart: Component<ChartProps> = (rawProps) => {\n  Chart.register(Colors, Filler, Legend, Tooltip, ...registerMap[rawProps.type])\n\n  const props = mergeProps(\n    {\n      options: { responsive: true, maintainAspectRatio: false } as ChartOptions,\n      plugins: [] as Plugin[]\n    },\n    rawProps\n  )\n  const [, rest] = splitProps(props, [\"class\", \"type\", \"data\", \"options\", \"plugins\"])\n\n  let ref: HTMLCanvasElement\n  let chart: Chart\n\n  const init = () => {\n    const ctx = ref!.getContext(\"2d\") as ChartItem\n    chart = new Chart(ctx, {\n      type: props.type,\n      data: props.data,\n      options: props.options,\n      plugins: props.plugins\n    })\n  }\n\n  onMount(() => init())\n\n  createEffect(\n    on(\n      () => props.data,\n      () => {\n        chart.data = props.data\n        chart.update()\n      },\n      { defer: true }\n    )\n  )\n\n  onCleanup(() => chart?.destroy())\n\n  return (\n    <div class={cn(\"max-w-full\", props.class)} {...rest}>\n      <canvas ref={ref!} />\n    </div>\n  )\n}\n\nfunction showTooltip(context: ChartContext) {\n  let el = document.getElementById(\"chartjs-tooltip\")\n  if (!el) {\n    el = document.createElement(\"div\")\n    el.id = \"chartjs-tooltip\"\n    document.body.appendChild(el)\n  }\n\n  const model = context.tooltip\n  if (model.opacity === 0 || !model.body) {\n    el.style.opacity = \"0\"\n    return\n  }\n\n  el.className = `p-2 bg-card text-card-foreground rounded-lg border shadow-sm text-sm ${\n    model.yAlign ?? `no-transform`\n  }`\n\n  let content = \"\"\n\n  model.title.forEach((title) => {\n    content += `<h3 class=\"font-semibold leading-none tracking-tight\">${title}</h3>`\n  })\n\n  content += `<div class=\"mt-1 text-muted-foreground\">`\n  const body = model.body.flatMap((body) => body.lines)\n  body.forEach((line, i) => {\n    const colors = model.labelColors[i]\n    content += `\n        <div class=\"flex items-center\">\n          <span class=\"inline-block h-2 w-2 mr-1 rounded-full border\" style=\"background: ${colors.backgroundColor}; border-color: ${colors.borderColor}\"></span>\n          ${line}\n        </div>`\n  })\n  content += `</div>`\n\n  el.innerHTML = content\n\n  const pos = context.chart.canvas.getBoundingClientRect()\n  el.style.opacity = \"1\"\n  el.style.position = \"absolute\"\n  el.style.left = `${pos.left + window.scrollX + model.caretX}px`\n  el.style.top = `${pos.top + window.scrollY + model.caretY}px`\n  el.style.pointerEvents = \"none\"\n}\n\nfunction createTypedChart(type: ChartType): Component<TypedChartProps> {\n  const chartsWithScales: ChartType[] = [\"bar\", \"line\", \"scatter\"]\n  const chartsWithLegends: ChartType[] = [\"bar\", \"line\"]\n\n  const options: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartsWithScales.includes(type)\n      ? {\n          x: {\n            border: { display: false },\n            grid: { display: false }\n          },\n          y: {\n            border: {\n              dash: [3],\n              dashOffset: 3,\n              display: false\n            },\n            grid: {\n              color: \"hsla(240, 3.8%, 46.1%, 0.4)\"\n            }\n          }\n        }\n      : {},\n    plugins: {\n      legend: chartsWithLegends.includes(type)\n        ? {\n            display: true,\n            align: \"end\",\n            labels: {\n              usePointStyle: true,\n              boxWidth: 6,\n              boxHeight: 6,\n              color: \"hsl(240, 3.8%, 46.1%)\",\n              font: { size: 14 }\n            }\n          }\n        : { display: false },\n      tooltip: {\n        enabled: false,\n        external: (context) => showTooltip(context)\n      }\n    }\n  }\n\n  return (props) => <BaseChart type={type} options={options} {...props} />\n}\n\nconst BarChart = createTypedChart(\"bar\")\nconst BubbleChart = createTypedChart(\"bubble\")\nconst DonutChart = createTypedChart(\"doughnut\")\nconst LineChart = createTypedChart(\"line\")\nconst PieChart = createTypedChart(\"pie\")\nconst PolarAreaChart = createTypedChart(\"polarArea\")\nconst RadarChart = createTypedChart(\"radar\")\nconst ScatterChart = createTypedChart(\"scatter\")\n\nexport {\n  BaseChart as Chart,\n  BarChart,\n  BubbleChart,\n  DonutChart,\n  LineChart,\n  PieChart,\n  PolarAreaChart,\n  RadarChart,\n  ScatterChart\n}\n"
    }
  ],
  "type": "ui"
}