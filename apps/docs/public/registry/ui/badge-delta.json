{
  "name": "badge-delta",
  "dependencies": [
    "@kobalte/core",
    "solid-icons"
  ],
  "registryDependencies": [
    "badge"
  ],
  "files": [
    {
      "name": "badge-delta.tsx",
      "content": "import type { Component } from \"solid-js\"\r\nimport { splitProps } from \"solid-js\"\r\n\r\nimport type { VariantProps } from \"class-variance-authority\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport type { IconTypes } from \"solid-icons\"\r\nimport {\r\n  TbArrowDown,\r\n  TbArrowDownRight,\r\n  TbArrowRight,\r\n  TbArrowUp,\r\n  TbArrowUpRight\r\n} from \"solid-icons/tb\"\r\n\r\nimport { cn } from \"~/lib/utils\"\r\nimport type { BadgeProps } from \"~/registry/ui/badge\"\r\nimport { Badge } from \"~/registry/ui/badge\"\r\n\r\ntype DeltaType = \"increase\" | \"moderateIncrease\" | \"unchanged\" | \"moderateDecrease\" | \"decrease\"\r\n\r\nconst badgeDeltaVariants = cva(\"\", {\r\n  variants: {\r\n    variant: {\r\n      success: \"bg-success hover:bg-success text-success-foreground\",\r\n      warning: \"bg-warning hover:bg-warning text-warning-foreground\",\r\n      error: \"bg-error hover:bg-error text-error-foreground\"\r\n    }\r\n  }\r\n})\r\ntype DeltaVariant = NonNullable<VariantProps<typeof badgeDeltaVariants>[\"variant\"]>\r\n\r\nconst iconMap: { [key in DeltaType]: IconTypes } = {\r\n  increase: TbArrowUp,\r\n  moderateIncrease: TbArrowUpRight,\r\n  unchanged: TbArrowRight,\r\n  moderateDecrease: TbArrowDownRight,\r\n  decrease: TbArrowDown\r\n}\r\n\r\nconst variantMap: { [key in DeltaType]: DeltaVariant } = {\r\n  increase: \"success\",\r\n  moderateIncrease: \"success\",\r\n  unchanged: \"warning\",\r\n  moderateDecrease: \"error\",\r\n  decrease: \"error\"\r\n}\r\n\r\nexport interface BadgeDeltaProps extends Omit<BadgeProps, \"variant\"> {\r\n  deltaType: DeltaType\r\n}\r\n\r\nconst BadgeDelta: Component<BadgeDeltaProps> = (props) => {\r\n  const [, rest] = splitProps(props, [\"class\", \"children\", \"deltaType\"])\r\n  const Icon = iconMap[props.deltaType]\r\n  const variant = variantMap[props.deltaType]\r\n\r\n  return (\r\n    <Badge class={cn(badgeDeltaVariants({ variant }), props.class)} {...rest}>\r\n      <span class=\"flex gap-1\">\r\n        <Icon class=\"h-4 w-4\" />\r\n        {props.children}\r\n      </span>\r\n    </Badge>\r\n  )\r\n}\r\n\r\nexport { BadgeDelta }\r\n"
    }
  ],
  "type": "ui"
}