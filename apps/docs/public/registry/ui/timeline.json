{
  "name": "timeline",
  "files": [
    {
      "name": "timeline.tsx",
      "content": "import type { ComponentProps, ParentComponent } from \"solid-js\"\nimport { splitProps, type Component, type JSXElement, mergeProps, Show } from \"solid-js\"\n\nimport { cn } from \"~/lib/utils\"\n\nexport type TimelinePropsItem = Omit<\n  TimelineItemProps,\n  \"isActive\" | \"isActiveBullet\" | \"bulletSize\" | \"lineSize\"\n> & {\n  bulletSize?: number\n}\n\nexport type TimelineProps = {\n  items: TimelinePropsItem[]\n  activeItem: number\n  bulletSize?: number\n  lineSize?: number\n}\n\n/*\n  No bullet or line is active when activeItem is -1\n  First bullet is active only if activeItem is 0 or more\n  First line is active only if activeItem is 1 or more\n*/\n\nconst Timeline: Component<TimelineProps> = (rawProps) => {\n  const props = mergeProps({ bulletSize: 16, lineSize: 2 }, rawProps)\n\n  return (\n    <ul\n      style={{\n        \"padding-left\": `${props.bulletSize / 2}px`\n      }}\n    >\n      {props.items.map((item, index) => {\n        return (\n          <TimelineItem\n            title={item.title}\n            description={item.description}\n            bullet={item.bullet}\n            isLast={index === props.items.length - 1}\n            isActive={props.activeItem === -1 ? false : props.activeItem >= index + 1}\n            isActiveBullet={props.activeItem === -1 ? false : props.activeItem >= index}\n            bulletSize={props.bulletSize}\n            lineSize={props.lineSize}\n          />\n        )\n      })}\n    </ul>\n  )\n}\n\nexport type TimelineItemProps = {\n  title: JSXElement\n  description?: JSXElement\n  bullet?: JSXElement\n  isLast?: boolean\n  isActive: boolean\n  isActiveBullet: boolean\n  class?: string\n  bulletSize: number\n  lineSize: number\n}\n\nconst TimelineItem: Component<TimelineItemProps> = (props) => {\n  const [, rest] = splitProps(props, [\n    \"class\",\n    \"bullet\",\n    \"description\",\n    \"title\",\n    \"isLast\",\n    \"isActive\",\n    \"isActiveBullet\",\n    \"bulletSize\",\n    \"lineSize\"\n  ])\n  return (\n    <li\n      class={cn(\n        \"relative border-l pb-8 pl-8\",\n        props.isLast && \"border-l-transparent pb-0\",\n        props.isActive && !props.isLast && \"border-l-primary\",\n        props.class\n      )}\n      style={{\n        \"border-left-width\": `${props.lineSize}px`\n      }}\n      {...rest}\n    >\n      <TimelineItemBullet\n        lineSize={props.lineSize}\n        bulletSize={props.bulletSize}\n        isActive={props.isActiveBullet}\n      >\n        {props.bullet}\n      </TimelineItemBullet>\n      <TimelineItemTitle>{props.title}</TimelineItemTitle>\n      <Show when={props.description}>\n        <TimelineItemDescription>{props.description}</TimelineItemDescription>\n      </Show>\n    </li>\n  )\n}\n\nexport type TimelineItemBulletProps = {\n  children?: JSXElement\n  isActive?: boolean\n  bulletSize: number\n  lineSize: number\n}\n\nconst TimelineItemBullet: Component<TimelineItemBulletProps> = (props) => {\n  return (\n    <div\n      class={cn(\n        `bg-background absolute top-0 flex items-center justify-center rounded-full border`,\n        props.isActive && \"border-primary\"\n      )}\n      style={{\n        width: `${props.bulletSize}px`,\n        height: `${props.bulletSize}px`,\n        left: `${-props.bulletSize / 2 - props.lineSize / 2}px`,\n        \"border-width\": `${props.lineSize}px`\n      }}\n      aria-hidden=\"true\"\n    >\n      {props.children}\n    </div>\n  )\n}\n\nconst TimelineItemTitle: ParentComponent = (props) => {\n  return <div class=\"mb-1 text-base font-semibold leading-none\">{props.children}</div>\n}\n\nconst TimelineItemDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\", \"children\"])\n  return (\n    <p class={cn(\"text-muted-foreground text-sm\", props.class)} {...rest}>\n      {props.children}\n    </p>\n  )\n}\n\nexport { Timeline }\n"
    }
  ],
  "type": "ui"
}