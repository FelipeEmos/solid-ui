{
  "name": "timeline",
  "files": [
    {
      "name": "timeline.tsx",
      "content": "import type { ComponentProps, ParentComponent } from \"solid-js\"\r\nimport { splitProps, type Component, type JSXElement, mergeProps, Show } from \"solid-js\"\r\n\r\nimport { cn } from \"~/lib/utils\"\r\n\r\nexport type TimelinePropsItem = Omit<\r\n  TimelineItemProps,\r\n  \"isActive\" | \"isActiveBullet\" | \"bulletSize\" | \"lineSize\"\r\n> & {\r\n  bulletSize?: number\r\n}\r\n\r\nexport type TimelineProps = {\r\n  items: TimelinePropsItem[]\r\n  activeItem: number\r\n  bulletSize?: number\r\n  lineSize?: number\r\n}\r\n\r\n/*\r\n  No bullet or line is active when activeItem is -1\r\n  First bullet is active only if activeItem is 0 or more\r\n  First line is active only if activeItem is 1 or more\r\n*/\r\n\r\nconst Timeline: Component<TimelineProps> = (rawProps) => {\r\n  const props = mergeProps({ bulletSize: 16, lineSize: 2 }, rawProps)\r\n\r\n  return (\r\n    <ul\r\n      style={{\r\n        \"padding-left\": `${props.bulletSize / 2}px`\r\n      }}\r\n    >\r\n      {props.items.map((item, index) => {\r\n        return (\r\n          <TimelineItem\r\n            title={item.title}\r\n            description={item.description}\r\n            bullet={item.bullet}\r\n            isLast={index === props.items.length - 1}\r\n            isActive={props.activeItem === -1 ? false : props.activeItem >= index + 1}\r\n            isActiveBullet={props.activeItem === -1 ? false : props.activeItem >= index}\r\n            bulletSize={props.bulletSize}\r\n            lineSize={props.lineSize}\r\n          />\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport type TimelineItemProps = {\r\n  title: JSXElement\r\n  description?: JSXElement\r\n  bullet?: JSXElement\r\n  isLast?: boolean\r\n  isActive: boolean\r\n  isActiveBullet: boolean\r\n  class?: string\r\n  bulletSize: number\r\n  lineSize: number\r\n}\r\n\r\nconst TimelineItem: Component<TimelineItemProps> = (props) => {\r\n  const [, rest] = splitProps(props, [\r\n    \"class\",\r\n    \"bullet\",\r\n    \"description\",\r\n    \"title\",\r\n    \"isLast\",\r\n    \"isActive\",\r\n    \"isActiveBullet\",\r\n    \"bulletSize\",\r\n    \"lineSize\"\r\n  ])\r\n  return (\r\n    <li\r\n      class={cn(\r\n        \"relative border-l pb-8 pl-8\",\r\n        props.isLast && \"border-l-transparent pb-0\",\r\n        props.isActive && !props.isLast && \"border-l-primary\",\r\n        props.class\r\n      )}\r\n      style={{\r\n        \"border-left-width\": `${props.lineSize}px`\r\n      }}\r\n      {...rest}\r\n    >\r\n      <TimelineItemBullet\r\n        lineSize={props.lineSize}\r\n        bulletSize={props.bulletSize}\r\n        isActive={props.isActiveBullet}\r\n      >\r\n        {props.bullet}\r\n      </TimelineItemBullet>\r\n      <TimelineItemTitle>{props.title}</TimelineItemTitle>\r\n      <Show when={props.description}>\r\n        <TimelineItemDescription>{props.description}</TimelineItemDescription>\r\n      </Show>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport type TimelineItemBulletProps = {\r\n  children?: JSXElement\r\n  isActive?: boolean\r\n  bulletSize: number\r\n  lineSize: number\r\n}\r\n\r\nconst TimelineItemBullet: Component<TimelineItemBulletProps> = (props) => {\r\n  return (\r\n    <div\r\n      class={cn(\r\n        `bg-background absolute top-0 flex items-center justify-center rounded-full border`,\r\n        props.isActive && \"border-primary\"\r\n      )}\r\n      style={{\r\n        width: `${props.bulletSize}px`,\r\n        height: `${props.bulletSize}px`,\r\n        left: `${-props.bulletSize / 2 - props.lineSize / 2}px`,\r\n        \"border-width\": `${props.lineSize}px`\r\n      }}\r\n      aria-hidden=\"true\"\r\n    >\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TimelineItemTitle: ParentComponent = (props) => {\r\n  return <div class=\"mb-1 text-base font-semibold leading-none\">{props.children}</div>\r\n}\r\n\r\nconst TimelineItemDescription: Component<ComponentProps<\"p\">> = (props) => {\r\n  const [, rest] = splitProps(props, [\"class\", \"children\"])\r\n  return (\r\n    <p class={cn(\"text-muted-foreground text-sm\", props.class)} {...rest}>\r\n      {props.children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport { Timeline }\r\n"
    }
  ],
  "type": "ui"
}